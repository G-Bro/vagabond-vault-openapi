/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/player-characters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all player characters */
        get: operations["getPlayerCharacters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/player-characters/{playerCharacterId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a player character by ID */
        get: operations["getPlayerCharacterById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        PlayerCharacter: {
            /** @description The unique identifier for a player character */
            id?: number;
            /**
             * @description The name of the player character
             * @example John
             */
            name?: string;
            stats?: {
                /**
                 * @description The charm stat of the player character
                 * @example 2
                 */
                charm?: number;
                /**
                 * @description The cunning stat of the player character
                 * @example 1
                 */
                cunning?: number;
                /**
                 * @description The finesse stat of the player character
                 * @example -2
                 */
                finesse?: number;
                /**
                 * @description The luck stat of the player character
                 * @example 1
                 */
                luck?: number;
                /**
                 * @description The might stat of the player character
                 * @example 0
                 */
                might?: number;
            };
            moves?: components["schemas"]["Move"][];
            natures?: components["schemas"]["Nature"][];
            drives?: components["schemas"]["Drive"][];
            playbook?: components["schemas"]["Playbook"];
            choices?: components["schemas"]["Choice"][];
            skills?: components["schemas"]["Skill"][];
            roguishFeats?: components["schemas"]["RoguishFeat"][];
            relationships?: components["schemas"]["Relationship"][];
        };
        Move: Record<string, never>;
        Nature: {
            /** @description The unique identifier for a drive */
            id?: number;
            /** @description The unique code for a drive */
            code?: string;
            /** @description The name of the drive */
            name?: string;
            /** @description The description of the drive */
            description?: string;
        };
        Drive: {
            /** @description The unique identifier for a drive */
            id?: number;
            /** @description The unique code for a drive */
            code?: string;
            /** @description The name of the drive */
            name?: string;
            /** @description The description of the drive */
            description?: string;
        };
        Source: {
            /** @description The unique identifier for a source */
            id?: number;
            /** @description The unique code for a source */
            code?: string;
            /** @description The name of the source */
            name?: string;
        };
        RoguishFeat: {
            /** @description The unique identifier for a roguish feat */
            id?: number;
            /** @description The unique code for a roguish feat */
            code?: string;
            /** @description The name of the roguish feat */
            name?: string;
            /** @description The description of the roguish feat */
            description?: string;
            /** @description The risks of the roguish feat */
            risks?: string;
        };
        Playbook: {
            /** @description The unique identifier for a drive */
            id?: number;
            /** @description The unique code for a drive */
            code?: string;
            /** @description The name of the drive */
            name?: string;
            /** @description The description of the drive */
            description?: string;
            /** @description The natures of the drive */
            natures?: components["schemas"]["Nature"][];
            /** @description The moves of the drive */
            moves?: components["schemas"]["Move"][];
            /** @description The drives of the drive */
            drives?: components["schemas"]["Drive"][];
            /** @description The source of the drive */
            source?: components["schemas"]["Source"];
            /** @description The skills of the drive */
            skills?: {
                /** @description The charm skill of the drive */
                charm?: number;
                /** @description The cunning skill of the drive */
                cunning?: number;
                /** @description The finesse skill of the drive */
                finesse?: number;
                /** @description The luck skill of the drive */
                luck?: number;
                /** @description The might skill of the drive */
                might?: number;
            };
            /** @description The roguish feats of the drive */
            roguishFeats?: components["schemas"]["RoguishFeat"][];
            /** @description The starting value of the drive */
            startingValue?: number;
            /** @description The short description of the drive */
            shortDescription?: string;
            /** @description The long description of the drive */
            longDescription?: string;
        };
        Stat: {
            /** @description The unique identifier for a stat */
            id?: number;
            /** @description The unique code for a stat */
            code?: string;
            /** @description The name of the stat */
            name?: string;
            /** @description The description of the stat */
            description?: string;
            /** @description The default value of the stat */
            defaultValue?: number;
        };
        Bonus: {
            /** @description The unique identifier for a bonus */
            id?: number;
            /** @description The value of the bonus */
            value?: number;
            /** @description The stat of the bonus */
            stat?: components["schemas"]["Stat"];
        };
        Skill: {
            /** @description The unique identifier for a skill */
            id?: number;
            /** @description The unique code for a skill */
            code?: string;
            /** @description The name of the skill */
            name?: string;
            /** @description The description of the skill */
            description?: string;
            /** @description The source of the skill */
            source?: components["schemas"]["Source"];
            /**
             * @description The type of the skill
             * @enum {string}
             */
            type?: "Weapon Skill";
        };
        Choice: {
            /** @description The unique identifier for a choice */
            id?: number;
            /** @description The unique reference code for a choice */
            referenceCode?: string;
            /** @description The chosen option */
            choice?: {
                /** @description The type of choice */
                choiceType?: string;
                /** @description The resource of the choice */
                resource?: components["schemas"]["Move"] | components["schemas"]["Drive"] | components["schemas"]["Nature"] | components["schemas"]["Bonus"] | components["schemas"]["Skill"] | components["schemas"]["RoguishFeat"];
            };
        };
        Faction: {
            /** @description The unique identifier for a faction */
            id?: number;
            /** @description The unique code for a faction */
            code?: string;
            /** @description The name of the faction */
            name?: string;
            /** @description The description of the faction */
            description?: string;
            /** @description The source of the faction */
            source?: components["schemas"]["Source"];
        };
        Relationship: {
            /** @description The unique identifier for a relationship */
            id?: number;
            /** @description The faction of the relationship */
            faction?: components["schemas"]["Faction"];
            /** @description The bonus of the relationship */
            bonus?: number;
            /** @description The prestige of the relationship */
            prestige?: number;
            /** @description The notoriety of the relationship */
            notoriety?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getPlayerCharacters: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of player characters */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayerCharacter"][];
                };
            };
        };
    };
    getPlayerCharacterById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the player character to get */
                playerCharacterId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A player character */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayerCharacter"];
                };
            };
        };
    };
}
